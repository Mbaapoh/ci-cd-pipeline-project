version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
          - run:
              name: Destroying the environments ${CIRCLE_WORKFLOW_ID:0:7} 
              when: on_fail
              command: |
                echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
                
                aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-stack-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack --stack-name udapeople-backend-stack-${CIRCLE_WORKFLOW_ID:0:7}
                aws cloudformation delete-stack --stack-name initial-stack-${CIRCLE_WORKFLOW_ID:0:7} 
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.  
    parameters:
      workflow_id:
        type: string 
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://kvdb.io/9cJfbDP95KHTZqy9vBgffp/migration_$\{CIRCLE_WORKFLOW_ID:0:7\})
            if (( $SUCCESS == 1 ));
            then
            cd ~/project/backend
            npm install
            npm run migration:revert
            fi 

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-end-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
            
      - save_cache:
          paths: [frontend/node_modules]
          key: front-end-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [back-end-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
            
      - save_cache:
          paths: [backend/node_modules]
          key: back-end-test
             
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-end-scan]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            
      - save_cache:
          paths: [frontend/node_modules]
          key: front-end-scan
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [back-end-scan]
      - run:
          name: back-end Scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force     
      - save_cache:
          paths: [backend/node_modules]
          key: back-end-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists.
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-project-${CIRCLE_WORKFLOW_ID:0:7}  \
              --stack-name udapeople-backend-stack-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 
                     
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-project-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name udapeople-frontend-stack-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
    
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum install -y tar gzip
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt  
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-project-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> ~/project/.circleci/ansible/inventory.txt  
      - persist_to_workspace:
          root: ~/
          paths:
            -  project/.circleci/ansible/inventory.txt   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
              
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["73:9f:36:ee:2d:4b:23:24:23:36:65:bf:78:54:58:46"] 
      - attach_workspace:
          at: ~/
      - run: 
          name: Check content of inventory.txt
          command: cat  ~/project/.circleci/ansible/inventory.txt  
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
            pip install awscli
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
            
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies.
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            echo "insecure" >> ~/.curlrc
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # Storing the generated migration successful status in a kvdd bucket for later usage
                curl https://kvdb.io/9cJfbDP95KHTZqy9vBgffp/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'  
            fi          
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
       
            

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root

    steps:
      - checkout
      - run:
          name: Checking OS distro
          command: |
            cat /etc/os-release
            pwd
      - attach_workspace:
          at: ~/
          paths:
              - project/.circleci/ansible/inventory.txt
      - run: 
          name: Check content of inventory.txt
          command: cat  ~/project/.circleci/ansible/inventory.txt 
      - run: 
          name: Check content of ~/project/.circleci/ansible/
          command: |
            cd ~/project/.circleci/ansible/
            ls -la                 
      
      - run:
          name: Install aws dependencies
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters Name=tag:project,Values=udapeople-backend-project-${CIRCLE_WORKFLOW_ID:0:7} \
              --output text
              )
            echo BACKEND_IP
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["73:9f:36:ee:2d:4b:23:24:23:36:65:bf:78:54:58:46"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
            ansible --version
            pip install awscli
            aws --version
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            echo "Check current directory PWD"
            pwd
            ls -la
            tar -C backend -czvf artifact.tar.gz .
            echo "Checking content of current directory"
            ls -larth  
            readlink -f artifact.tar.gz
            echo "Checking content of circleci/ansible"
            cd .circleci/ansible
            ls -la
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml -vvv
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
      - revert-migrations:  
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  

  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11 
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli 
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(
              aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-project-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text
            )
            echo "${BACKEND_IP}"
            export API_URL="http://${BACKEND_IP}:3030" 
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              if curl -s ${URL} | grep "Welcome"
              then
                return 0
              else
                return 1
              fi
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}   
            
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name Initial-stack-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7} 
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}  
          
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"

            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "-----------------Deleting old unused resoruces----------------"
              echo OldWorkflowID: "${OldWorkflowID}"
              aws s3 rm s3://udapeople-"${OldWorkflowID}"  --recursive
              echo OldWorkflowID: "${OldWorkflowID}"
              echo "-----------------Finished deleting files in s3----------------"
              aws cloudformation delete-stack --stack-name "udapeople-backend-stack-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-stack-${OldWorkflowID}"
              echo "-----------------Finished Deleting old unused resoruces----------------."
            else
              echo "$OldWorkflowID==$CurrentWorkflowID => Stack is maintained..."
            fi
      - destroy-environment:
              workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
          
 
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
  


