version: 2.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string   
    steps:
          - run:
              name: Destroying the environments ${CIRCLE_WORKFLOW_ID:0:7} 
              when: on_fail
              command: |
                echo "Destroying environment: << parameters.workflow_id >> "
                
                # aws s3 rm s3://udapeoplefrontend<< parameters.workflow_id >> --recursive
                aws cloudformation delete-stack --stack-name udapeople-backend-stack-<< parameters.workflow_id >> 
                aws cloudformation delete-stack --stack-name udapeople-frontend-stack-<< parameters.workflow_id >>     


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            # exit 1
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            # exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-end-test]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
            
      - save_cache:
          paths: [frontend/node_modules]
          key: front-end-test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [back-end-test]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
            
      - save_cache:
          paths: [backend/node_modules]
          key: back-end-test
             
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [front-end-scan]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
            
      - save_cache:
          paths: [frontend/node_modules]
          key: front-end-scan
          
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [back-end-scan]
      - run:
          name: back-end Scan
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force     
      - save_cache:
          paths: [backend/node_modules]
          key: back-end-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists.
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-project  \
              --stack-name udapeople-backend-stack-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
              
      - run:
          name: Destroy back-end infrastructure
          command: |
            aws cloudformation delete-stack \
              --stack-name udapeople-backend-stack-${CIRCLE_WORKFLOW_ID:0:7} 
          when: on_fail
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-project \
              --stack-name "udapeople-frontend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
            name: Destroy front-end infrastructure 
            command: |
              aws cloudformation delete-stack --stack-name udapeople-frontend-stack-${CIRCLE_WORKFLOW_ID:0:7} 
            when: on_fail 
      
    
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            yum install -y tar gzip
            echo "[web]" > ~/project/.circleci/ansible/inventory.txt  
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-project" \
              --output text >> ~/project/.circleci/ansible/inventory.txt  
      - persist_to_workspace:
          root: ~/
          paths:
            -  project/.circleci/ansible/inventory.txt   
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}    
              
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["73:9f:36:ee:2d:4b:23:24:23:36:65:bf:78:54:58:46"] 
      - attach_workspace:
          at: ~/
      - run: 
          name: Check content of inventory.txt
          command: cat  ~/project/.circleci/ansible/inventory.txt  
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible 
            pip install awscli
            aws --version
      
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
            
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7} 
            
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies.
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            echo "insecure" >> ~/.curlrc
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # Storing the generated migration successful status in a kvdd bucket for later usage
                curl https://kvdb.io/9cJfbDP95KHTZqy9vBgffp/migration_$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'  
            fi          
      - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
            

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
        user: root

    steps:
      - checkout
      - run:
          name: Checking OS distro
          command: |
            cat /etc/os-release
            pwd
      - attach_workspace:
              at: ~/project/.circleci/ansible/inventory.txt
      - run: 
          name: Check content of inventory.txt
          command: cat  ~/project/.circleci/ansible/inventory.txt 
      - run: 
          name: Check content of ~/project/.circleci/ansible/
          command: |
            cd ~/project/.circleci/ansible/
            ls -la                 
      
      - run:
          name: Install aws dependencies
          command: |
            apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            ./aws/install
            
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances...............)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
            
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}     
    

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      


